{"version":3,"file":"static/js/218.589cf318.chunk.js","mappings":"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","sources":["components/Container/Container.styled.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactIListItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.section`\n  margin: 0 auto;\n  width: 1280px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactFilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 10px;\n  margin-top: 10px;\n  border: solid 1px #000;\n  padding: 10px;\n`;\nexport const ContactFilterInput = styled.input``;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addFilter } from 'redux/contacts/contacts-slice';\nimport { ContactFilterLabel, ContactFilterInput } from './ContactFilter.styled';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const filterContact = e => {\n    console.log(e.target.value);\n    dispatch(addFilter(e.target.value));\n  };\n\n  return (\n    <ContactFilterLabel>\n      Find contacts by name\n      <ContactFilterInput\n        type=\"text\"\n        name=\"filter\"\n        // value={filterItems}\n        onChange={filterContact}\n      />\n    </ContactFilterLabel>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FormTitle = styled.h1`\n  margin-bottom: 20px;\n`;\nexport const Form = styled.form`\n  border: solid 1px #000;\n  padding: 10px;\n`;\nexport const FormLabel = styled.label`\n  position: relative;\n  font-size: 10px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\nexport const FormInput = styled.input``;\nexport const FormButton = styled.button`\n  cursor: pointer;\n  margin-top: 10px;\n  padding: 3px;\n`;\n// import { Form, Field } from 'formik';\n\n// export const FormTitle = styled.h1`\n//   margin-bottom: 20px;\n// `;\n// export const FormThumb = styled(Form)`\n//   border: solid 1px #000;\n//   padding: 10px;\n// `;\n// export const FormLabel = styled.label`\n// position: relative;\n// font-size: 10px;\n// display: flex;\n// flex-direction: column;\n// margin-bottom: 15px;\n// `;\n// export const FormInput = styled(Field)``;\n// export const FormErrorMessage = styled.p`\n//   position: absolute;\n//   bottom: -11px;\n//   left: 0;\n//   color: tomato;\n// `;\n// export const FormButton = styled.button`\n// cursor: pointer;\n// margin-top: 10px;\n// padding: 3px;\n// `;\n","import { useForm } from 'react-hook-form';\nimport { toast } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperation } from 'redux/contacts';\nimport { contactsSelectors } from 'redux/contacts';\nimport {\n  FormTitle,\n  Form,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const { register, handleSubmit, resetField } = useForm();\n\n  const onSubmit = async data => {\n    console.log(data);\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      return toast.error(`${data.name} is already in contacts.`);\n    }\n\n    dispatch(contactsOperation.addContacts(data));\n\n    resetField('name');\n    resetField('number');\n\n    toast.success(`${data.name} was created!`);\n  };\n\n  return (\n    <>\n      <FormTitle>Phonebook</FormTitle>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <FormLabel>\n          Name\n          <FormInput\n            {...register('name')}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            autoComplete=\"off\"\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <FormInput\n            {...register('number')}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            autoComplete=\"off\"\n          />\n        </FormLabel>\n\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </Form>\n    </>\n  );\n};\n\n// import { useState } from 'react';\n\n// export const ContactForm = ({ onSubmit }) => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     onSubmit({ name, number });\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <>\n//       <FormTitle>Phonebook</FormTitle>\n//       <Form onSubmit={handleSubmit}>\n//         <FormLabel>\n//           Name\n//           <FormInput\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={handleInputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             autoComplete=\"off\"\n//           />\n//         </FormLabel>\n//         <FormLabel>\n//           Number\n//           <FormInput\n//             name=\"number\"\n//             type=\"tel\"\n//             value={number}\n//             onChange={handleInputChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             autoComplete=\"off\"\n//           />\n//         </FormLabel>\n\n//         <FormButton type=\"submit\">Add contact</FormButton>\n//       </Form>\n//     </>\n//   );\n// };\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// import { Component } from 'react';\n// import { Formik, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\n// import PropTypes from 'prop-types';\n// import {\n//   FormTitle,\n//   FormThumb,\n//   FormLabel,\n//   FormInput,\n//   FormButton,\n//   FormErrorMessage,\n// } from './ContactForm.styled';\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// const validationSchema = Yup.object({\n//   name: Yup.string()\n//     .required()\n//     .matches(\n//       \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n//       'Name may contain only letters, apostrophe, dash and spaces.'\n//     ),\n//   number: Yup.string().required(),\n// });\n\n// const renderErrorMessage = message => (\n//   <FormErrorMessage>{message}</FormErrorMessage>\n// );\n\n// export const ContactForm = ({ onSubmit }) => {\n//   const handleSubmit = (values, { resetForm }) => {\n//     onSubmit(values);\n\n//     resetForm();\n//   };\n\n//   return (\n//     <>\n//       <FormTitle>Phonebook</FormTitle>\n//       <Formik\n//         validationSchema={validationSchema}\n//         initialValues={initialValues}\n//         onSubmit={handleSubmit}\n//       >\n//         <FormThumb>\n//           <FormLabel>\n//             Name\n//             <FormInput name=\"name\" type=\"text\" />\n//             <ErrorMessage name=\"name\" render={renderErrorMessage} />\n//           </FormLabel>\n//           <FormLabel>\n//   Number\n//   <FormInput name=\"number\" type=\"tel\" />\n//   <ErrorMessage name=\"number\" render={renderErrorMessage} />\n// </FormLabel>\n//           <FormButton type=\"submit\">Add contact</FormButton>\n//         </FormThumb>\n//       </Formik>\n//     </>\n//   );\n// };\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export class ContactForm extends Component {\n//   state = {\n//     name: '',\n//   };\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.setState({ name: '' });\n//   };\n\n//   render() {\n//     return (\n// <>\n//   <FormTitle>Phonebook</FormTitle>\n//   <Form onSubmit={this.handleSubmit}>\n//     <FormNameLabel>\n//       Name\n//       <FormNameInput\n//         type=\"text\"\n//         name=\"name\"\n//         value={this.state.name}\n//         onChange={this.handleInputChange}\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         required\n//       />\n//     </FormNameLabel>\n//     <FormNameButton type=\"submit\">Add contact</FormNameButton>\n//   </Form>\n// </>\n//     );\n//   }\n// }\n","import styled from '@emotion/styled';\n\nexport const ContactTitle = styled.h2`\n  margin-top: 20px;\n`;\nexport const ContactNameList = styled.ul`\n  list-style-type: none;\n  margin-top: 20px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactNameItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n  padding-bottom: 2px;\n  border-bottom: 1px solid #000;\n`;\nexport const ContactTextWrap = styled.div`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const ContactNameText = styled.p`\n  font-weight: 700;\n`;\nexport const ContactNumberText = styled.p``;\n\n// export const ContactListButtonsWrap = styled.div`\n//   margin-top: 10px;\n//   display: flex;\n//   align-items: center;\n//   justify-content: start;\n// `;\n\nexport const ContactListButton = styled.button`\n  margin-top: 5px;\n  cursor: pointer;\n  height: 20px;\n  width: 60px;\n  margin-left: 5px;\n`;\n\nexport const Form = styled.form``;\n\nexport const FormInputWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const FormInputName = styled.input`\n  width: 200px;\n  font-size: 15px;\n  font-weight: 700;\n  /* border: none; */\n  background-color: lightgray;\n`;\nexport const FormInputNumber = styled.input`\n  width: 95px;\n  font-size: 15px;\n  /* border: none; */\n  background-color: lightgray;\n`;\nexport const FormButton = styled.button`\n  margin-top: 5px;\n  cursor: pointer;\n  height: 20px;\n  width: 60px;\n  margin-left: 5px;\n`;\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { toast } from 'react-hot-toast';\nimport {\n  ContactNameItem,\n  ContactTextWrap,\n  ContactNameText,\n  ContactNumberText,\n  ContactListButton,\n  Form,\n  FormInputWrap,\n  FormInputName,\n  FormInputNumber,\n  FormButton,\n} from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\n// import {\n//   useDeleteContactMutation,\n//   useUpdateContactMutation,\n//   useFetchContactsQuery,\n// } from 'redux/contactSlice';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const [showButton, setShowButton] = useState(false);\n  const [showEditForm, setShowEditForm] = useState(false);\n\n  // const [updateContact] = useUpdateContactMutation();\n  // const [deleteContact, { isLoading }] = useDeleteContactMutation();\n  // const { data: contacts } = useFetchContactsQuery();\n\n  const { register, handleSubmit /*resetField*/ } = useForm({\n    defaultValues: {\n      name,\n      phone: number,\n    },\n  });\n\n  const onShowButton = () => {\n    setShowButton(!showButton);\n  };\n\n  const onShowEditForm = () => {\n    setShowEditForm(!showEditForm);\n  };\n\n  const onDeleteContact = id => {\n    // deleteContact(id);\n    toast.success(`${name}has been deleted!`);\n  };\n\n  const onSubmit = async contact => {\n    console.log(contact);\n    // if (\n    //   contacts.some(el => el.name.toLowerCase() === contact.name.toLowerCase())\n    // ) {\n    //   return toast.error(`${contact.name} is already in contacts.`);\n    // }\n\n    // try {\n    //   await updateContact({ id, ...contact });\n    //   console.log(contact);\n\n    //   toast.success(`${contact.name} has been changed!`);\n\n    //   onShowButton();\n    //   onShowEditForm();\n    //   resetField('name');\n    //   resetField('phone');\n    // } catch (error) {\n    //   console.log(error);\n    // }\n  };\n\n  return (\n    <>\n      <ContactNameItem>\n        {!showEditForm && (\n          <>\n            <ContactTextWrap onClick={() => onShowButton()}>\n              <ContactNameText>{name}</ContactNameText>\n              <ContactNumberText>{number}</ContactNumberText>\n            </ContactTextWrap>\n            <AnimatePresence>\n              {showButton && (\n                <motion.div\n                  initial={{ height: 0 }}\n                  animate={{ height: 'auto' }}\n                  exit={{ height: 0 }}\n                  style={{ overflow: 'hidden' }}\n                  transition={{ duration: 0.5 }}\n                >\n                  <ContactListButton\n                    onClick={() => onDeleteContact(id)}\n                    // disabled={isLoading}\n                  >\n                    Delete\n                  </ContactListButton>\n                  <ContactListButton onClick={() => onShowEditForm()}>\n                    Edit\n                  </ContactListButton>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </>\n        )}\n        {showEditForm && (\n          <Form onSubmit={handleSubmit(onSubmit)}>\n            <FormInputWrap>\n              <FormInputName\n                {...register('name')}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                autoComplete=\"off\"\n              />\n              <FormInputNumber\n                {...register('phone')}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                autoComplete=\"off\"\n              />\n            </FormInputWrap>\n            <FormButton\n              onClick={() => {\n                onShowButton();\n                onShowEditForm();\n              }}\n            >\n              Back\n            </FormButton>\n            <FormButton type=\"submit\">Edit</FormButton>\n          </Form>\n        )}\n      </ContactNameItem>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// import { useEffect } from 'react';\nimport { ContactNameList } from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem/ContactIListItem';\nimport { /*useDispatch,*/ useSelector } from 'react-redux';\nimport { /*contactsOperation,*/ contactsSelectors } from 'redux/contacts';\n\n// import { Loader } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  // const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  // useEffect(() => {\n  //   dispatch(contactsOperation.addContacts());\n  // }, [dispatch]);\n\n  const getContactsList = () => {\n    const filterValue = filter.toLowerCase().trim();\n    const sortData = [...contacts].sort((firstEl, secondEl) =>\n      firstEl.name.localeCompare(secondEl.name)\n    );\n\n    return sortData.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    );\n  };\n\n  return (\n    <>\n      <ContactNameList>\n        {/* {isFetching && <Loader />} */}\n        {contacts &&\n          getContactsList().map(({ name, number, id }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n      </ContactNameList>\n    </>\n  );\n};\n","import { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Container } from 'components/Container/Container.styled';\n\nconst ContactsPage = () => {\n  return (\n    <Container>\n      <ContactForm />\n      <ContactFilter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Container","styled","ContactFilterLabel","ContactFilterInput","ContactFilter","dispatch","useDispatch","type","name","onChange","e","console","log","target","value","addFilter","FormTitle","Form","FormLabel","FormInput","FormButton","ContactForm","contacts","useSelector","contactsSelectors","useForm","register","handleSubmit","resetField","onSubmit","data","some","contact","toLowerCase","toast","contactsOperation","pattern","title","required","autoComplete","ContactNameList","ContactNameItem","ContactTextWrap","ContactNameText","ContactNumberText","ContactListButton","FormInputWrap","FormInputName","FormInputNumber","ContactListItem","id","number","useState","showButton","setShowButton","showEditForm","setShowEditForm","defaultValues","phone","onShowButton","onShowEditForm","onClick","AnimatePresence","motion","initial","height","animate","exit","style","overflow","transition","duration","ContactList","filter","filterValue","trim","sort","firstEl","secondEl","localeCompare","includes","getContactsList","map"],"sourceRoot":""}